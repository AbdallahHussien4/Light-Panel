//const byte array0[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
//const byte array1[10][10]={{0,0,0,0,1,1,1,0,0,0},{0,0,0,1,1,1,1,0,0,0},{0,0,0,1,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0}};
//const byte array2[10][10]={{0,0,1,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,1,1,1,1,1,0,0}};
//const byte array3[10][10]={{0,0,1,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0}};
//const byte array4[10][10]={{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0}};
//const byte array5[10][10]={{0,0,1,1,1,1,1,1,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0}};
//const byte array6[10][10]={{0,0,1,1,1,1,1,1,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,1,1,1,1,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0}};
//const byte array7[10][10]={{0,0,0,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0}};
//const byte array8[10][10]={{0,0,0,0,1,1,0,0,0,0},{0,0,0,1,0,0,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,0,0,1,0,0,0},{0,0,0,0,1,1,0,0,0,0},{0,0,0,1,0,0,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,0,0,1,0,0,0},{0,0,0,0,1,1,0,0,0,0}};
//const byte array9[10][10]={{0,0,1,1,1,1,1,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0}};
//const byte arraySmile[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1},{0,1,0,1,0,0,1,0,1,0},{0,1,0,0,1,1,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
//const byte arraySad[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1},{0,1,0,0,1,1,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
//const byte arrayFlirt[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,1,0,1,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1},{0,1,0,1,0,0,1,0,1,0},{0,1,0,0,1,1,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
//const byte arraySurprise[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1},{0,1,0,0,1,1,0,0,1,0},{0,1,0,0,1,1,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
//const byte arrayCry[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,0,0,0,0,1,0,0,0,1},{1,0,0,0,0,1,0,0,0,1},{0,1,0,0,0,0,0,0,1,0},{0,1,0,0,1,1,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
//const byte arrayReverseSmile[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,1,1,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1},{0,1,0,1,0,0,1,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
//const byte arrayConfuse[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1},{0,1,0,0,0,0,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
//const byte arrayHeart[10][10]={{0,0,0,0,0,0,0,0,0,0},{0,0,1,1,0,0,1,1,0,0},{0,1,0,0,1,1,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1},{0,1,0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,0,0,1,0,0,0},{0,0,0,0,1,1,0,0,0,0}};
//const byte arrayKiss[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,1,1,0,0,0,0,1},{0,1,0,1,1,0,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
//const byte arrayJoker[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,1,0,0,0,0,0,0,1,1},{1,0,1,0,0,0,0,1,0,1},{0,1,0,1,0,0,1,0,1,0},{0,1,0,0,1,1,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
byte password[4]={1,2,3,4};
byte Mode=0,Key=10,Begin=1,pattern=0,PasswordPattern=0,OldKey=10;

void setup() {
  // put your setup code here, to run once:
  pinMode(19,INPUT);
  pinMode(2,INPUT);
  for(byte i=4;i<=18;i++)pinMode(i,OUTPUT);
  attachInterrupt(digitalPinToInterrupt(2), GetKey, RISING);
  Start();

}

void loop() {
  Begin=1;
  if(Key==0&&Mode==0)
  {
    const byte array0[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
    Display(array0);    
  }
  if(Key==1&&Mode==0)
  {
    const byte array1[10][10]={{0,0,0,0,1,1,1,0,0,0},{0,0,0,1,1,1,1,0,0,0},{0,0,0,1,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0}};
    Display(array1);
  }
  if(Key==2&&Mode==0)
  {
    const byte array2[10][10]={{0,0,1,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,1,1,1,1,1,0,0}};
    Display(array2);
  }
  if(Key==3&&Mode==0)
  {
    const byte array3[10][10]={{0,0,1,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0}};
    Display(array3);
  }
  if(Key==4&&Mode==0)
  {
    const byte array4[10][10]={{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0}};
    Display(array4);
  }
  if(Key==5&&Mode==0)
  { 
    const byte array5[10][10]={{0,0,1,1,1,1,1,1,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0}};
    Display(array5);
  }
  if(Key==6&&Mode==0)
  {
    const byte array6[10][10]={{0,0,1,1,1,1,1,1,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0},{0,0,1,1,1,1,1,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0}};
    Display(array6);
  }
  if(Key==7&&Mode==0)
  {
    const byte array7[10][10]={{0,0,0,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0}};
    Display(array7);
  }
  if(Key==8&&Mode==0)
  {
    const byte array8[10][10]={{0,0,0,0,1,1,0,0,0,0},{0,0,0,1,0,0,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,0,0,1,0,0,0},{0,0,0,0,1,1,0,0,0,0},{0,0,0,1,0,0,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,0,0,1,0,0,0},{0,0,0,0,1,1,0,0,0,0}};
    Display(array8);
  }
  if(Key==9&&Mode==0)
  {
    const byte array9[10][10]={{0,0,1,1,1,1,1,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,1,1,1,1,1,1,0,0}};
    Display(array9);
  }
    
  if(Key==0&&Mode==1)
  {
    const byte arraySmile[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1},{0,1,0,1,0,0,1,0,1,0},{0,1,0,0,1,1,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
    Display(arraySmile);
  }
  if(Key==1&&Mode==1)
  {
    const byte arraySad[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1},{0,1,0,0,1,1,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
    Display(arraySad);
  }
  if(Key==2&&Mode==1)
  {
    const byte arrayFlirt[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,1,0,1,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1},{0,1,0,1,0,0,1,0,1,0},{0,1,0,0,1,1,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
    Display(arrayFlirt);
  }
  if(Key==3&&Mode==1)
  {
    const byte arraySurprise[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1},{0,1,0,0,1,1,0,0,1,0},{0,1,0,0,1,1,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
    Display(arraySurprise);
  }
  if(Key==4&&Mode==1)
  {
    const byte arrayCry[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,0,0,0,0,1,0,0,0,1},{1,0,0,0,0,1,0,0,0,1},{0,1,0,0,0,0,0,0,1,0},{0,1,0,0,1,1,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
    Display(arrayCry);
  }
  if(Key==5&&Mode==1)
  {
    const byte arrayReverseSmile[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,1,1,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1},{0,1,0,1,0,0,1,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
    Display(arrayReverseSmile);
  }
  if(Key==6&&Mode==1)
  {
    const byte arrayConfuse[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1},{0,1,0,0,0,0,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
    Display(arrayConfuse);
  }
  if(Key==7&&Mode==1)
  {
    const byte arrayHeart[10][10]={{0,0,0,0,0,0,0,0,0,0},{0,0,1,1,0,0,1,1,0,0},{0,1,0,0,1,1,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,1},{0,1,0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,0,0,1,0,0,0},{0,0,0,0,1,1,0,0,0,0}};
    Display(arrayHeart);
  }
  if(Key==8&&Mode==1)
  {
    const byte arrayKiss[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,0,0,0,0,0,0,0,0,1},{1,0,0,1,1,0,0,0,0,1},{0,1,0,1,1,0,0,0,1,0},{0,1,0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
    Display(arrayKiss);
  }
  if(Key==9&&Mode==1)
  {
    const byte arrayJoker[10][10]={{0,0,0,1,1,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,1,0},{0,1,0,1,0,0,1,0,1,0},{1,1,0,0,0,0,0,0,1,1},{1,0,1,0,0,0,0,1,0,1},{0,1,0,1,0,0,1,0,1,0},{0,1,0,0,1,1,0,0,1,0},{0,0,1,0,0,0,0,1,0,0},{0,0,0,1,1,1,1,0,0,0}};
    Display(arrayJoker);   
  }        
            
}

void CheckPassword() 
{
  if(Key==password[0]&&pattern==0)
    pattern=1;
  else if(Key==password[1]&&pattern==1)
    pattern=2; 
  else if(Key==password[2]&&pattern==2)
    pattern=3;
  else if(Key==password[3]&&pattern==3)
  {
    if(password[0]!=password[3]||Mode==0)  //To handle if the password contain four identical digit (0000 OR 5555 ....)
    {
        pattern=0;     
        Mode=1;
        tone(3,2000,2000);
    }
    else if(Mode==1)
    {
      pattern=0;     
      Mode=0;
      tone(3,2000,2000);
    }
  }

  else if(Key==password[3]&&pattern==0)
    pattern=1;
  else if(Key==password[2]&&pattern==1)
    pattern=2; 
  else if(Key==password[1]&&pattern==2)
    pattern=3;
  else if(Key==password[0]&&pattern==3)
  {
    pattern=0;     
    Mode=0;
    tone(3,2000,2000);
  }
  else pattern=0;
}

void CheckPasswordChange() 
{
  if(Key==1&&PasswordPattern==0)
    PasswordPattern=1;
  else if(Key==2&&PasswordPattern==1)
    PasswordPattern=2; 
  else if(Key==1&&PasswordPattern==2)
    PasswordPattern=3;
  else if(Key==2&&PasswordPattern==3)
    PasswordPattern=4;     
  else if(PasswordPattern==4)
  {
    PasswordPattern=5;
    password[0]=Key;
  }
  else if(PasswordPattern==5)
  {
    PasswordPattern=6;
    password[1]=Key;
  }
  else if(PasswordPattern==6)
  {
    PasswordPattern=7;
    password[2]=Key;
  }
  else if(PasswordPattern==7)
  {
    password[3]=Key;  
    PasswordPattern=0; 
  }   
  else PasswordPattern=0; 

}

void Display(const byte arr[10][10])
{
  for(byte i=1;i<=10;i++)
    {
      PORTD=(i)*16;
      for(byte j=1;j<=10;j++)
      {
        if(arr[i-1][j-1]==1&&Begin==1)
        {  
          PORTB=j;
          digitalWrite(17,HIGH);
          delay(100);
          digitalWrite(17,LOW);
        }
      } 
    }
}
void GetKey(){
  Begin=0;
  if(analogRead(19)==993&&OldKey!=0)
  {
    Key=0;
    tone(3,261,500);
    OldKey=0;
    Reset();
  }
  else if(analogRead(19)==905&&OldKey!=1)
  {
    Key=1;
    tone(3,294,500);
    OldKey=1;
    Reset();
  }
  else if(analogRead(19)==964&&OldKey!=2)
  {
    Key=2;  
    tone(3,329,500);
    OldKey=2;
    Reset();
  }
  else if(analogRead(19)==881&&OldKey!=3)
  {
    Key=3; 
    tone(3,349,500);
    OldKey=3;
    Reset();
  }
  else if(analogRead(19)==938&&OldKey!=4)
  {
  Key=4;
  tone(3,392,500);
  OldKey=4;
  Reset();
  }
  else if(analogRead(19)==859&&OldKey!=5)
  {
    Key=5;
    tone(3,440,500);
    OldKey=5;
    Reset();
  }
  else if(analogRead(19)==913&&OldKey!=6)
  {
    Key=6;
    tone(3,493,500);
    OldKey=6;
    Reset();
  }
  else if(analogRead(19)==838&&OldKey!=7)
  {
    Key=7;
    tone(3,523,500);
    OldKey=7;
    Reset();
  }
  else if(analogRead(19)==889&&OldKey!=8)
  {
    Key=8;
    tone(3,573,500);
    OldKey=8;
    Reset();
  }
  else if(analogRead(19)==818&&OldKey!=9)
  {
    Key=9;
    tone(3,623,500);
    OldKey=9;
    Reset();
  }
  CheckPassword();
  CheckPasswordChange();  
  
  
}

void Start()
{
  
  for(byte i=1;i<=10;i++){
    PORTB=i;
    for(byte j=1;j<=10;j++)
    {
      digitalWrite(17,LOW);
      PORTD=j*16;
      digitalWrite(17,HIGH);
    }
    delay(200);
    Reset();
  } 
  for(byte i=1;i<=10;i++){
    PORTD=i*16;
    for(byte j=1;j<=10;j++)
    {
      digitalWrite(17,HIGH);
      PORTB=j;
      digitalWrite(17,LOW);
    }
    delay(200);
    Reset();
  } 
}

void Reset(){
  for(byte i=0;i<10;i++){
    PORTB=(i+1);
    digitalWrite(17,HIGH);
    for(byte j=0;j<10;j++)
    {
        PORTD=(j+1)*16;
        PORTD=0;
    }
    } 
     digitalWrite(17,LOW);      
}
